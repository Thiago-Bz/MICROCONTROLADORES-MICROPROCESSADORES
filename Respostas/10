1 ->

Vbe = 0,7 V
β = 100
VCE = 0,2 V
Vcc = 3 V
Imax,msp = 10 ma

O primeiro passo é determinar a corrente de base, visto que a corrente de carga ou coletor é de 4A.
temos então:

Ib = Ic / 100 
ib = 4 / 100 = 40 mA

Visto que essa corrente é maior que a corrente fornecedor, vamos utilizar a forma de par Darlington.
Ib = Ic / β2 
Ib = 4 /10000 = 0,4 mA

para calcular o resistor Rb fazemos:
Rb = (Vcc – 2*Vbe)/Ib = (3 – 2*0,7)/0,4*10^(-3) = 4kΩ 

2 ->
Vbe = 0,7 V
β = 120
VCE = 0,2 V
Vcc = 3,5 V
Imax,msp = 10 ma

como a corrente Ic = 1A, logo a corrente de base:

Ib = Ic/β = 1/120 = 8,33 mA.
 calculando o resistor Rb:
Rb = (Vcc-Vbe)/Ib
= (Vcc-Vbe)*β/Ic = ((3,5 - 0,7)*120)/1 = 336 Ω

4 ->

# include  < msp430g2553.h > 
# include  < msp430.h > 
# define  LED1 BIT0
# define  LED2 BIT6
# define  LEDS (LED1 | LED2)
# define  LINHA1 BIT1
# Definir  LINHA2 BIT2
# define  LINHA3 BIT4
# define  BTN BIT3

int  main ( void )
{
    WDTCTL = WDTPW | WDTHOLD;  // parar wdtctl - timer do watchdog 
    P1DIR | = LEDS;          // DEFINE LEDS COMO SAIDAS. 
    int n;
    enquanto ( 1 )
    {
      
 
//                 configurando os leds 1 e 2 

                for (n = 0 ; n < 0XFFFF ; n ++)
                {
                    P1DIR | = (LINHA1 + LINHA2);            // DEFINE LINHA1 E LINHA2 COMO SAIDA 
                    P1DIR & = ~ (LINHA3);            // DEFINIR LINHA3 COMO ENTRADA 
                    P1OUT & = 0 ;
                    P1OUT | = LINHA1;           // SETA LINHA1 
 
                    P1DIR | = (LINHA1 + LINHA3);            // DEFINE LINHA1 E LINHA2 COMO SAIDA 
                    P1DIR & = ~ (LINHA2);            // DEFINIR LINHA3 COMO ENTRADA 
                    P1OUT & = 0 ;
                    P1OUT | = LINHA1;           // SETA LINHA1
                    }
 
//                   LED-3 E LED-4 
 
                for (n = 0 ; n < 0XFFFF ; n ++)
                {
                    P1DIR | = (LINHA1 + LINHA2);            // DEFINE LINHA1 E LINHA2 COMO SAIDA 
                    P1DIR & = ~ (LINHA3);            // DEFINIR LINHA3 COMO ENTRADA 
                    P1OUT & = 0 ;
                    P1OUT | = LINHA2;           // SETA LINHA1                     

                    P1DIR | = (LINHA2 + LINHA3);            // DEFINE LINHA1 E LINHA2 COMO SAIDA 
                    P1DIR & = ~ (LINHA1);            // DEFINIR LINHA3 COMO ENTRADA 
                    P1OUT & = 0 ;
                    P1OUT | = LINHA2;           // SETA LINHA1
                }
 
//                   LED-5 E LED-6 
 
                for (n = 0 ; n < 0XFFFF ; n ++)
                {
                    P1DIR | = (LINHA1 + LINHA3);            // DEFINA LINHA1 E LINHA2 COMO SAIDA 
                    P1DIR & = ~ (LINHA2);            // DEFINIR LINHA3 COMO ENTRADA 
                    P1OUT & = 0 ;
                    P1OUT | = LINHA3;           // SETA LINHA1 
 
                    P1DIR | = (LINHA2 + LINHA3);            // DEFINA LINHA1 E LINHA2 COMO SAIDA 
                    P1DIR & = ~ (LINHA1);            // DEFINIR LINHA3 COMO ENTRADA 
                    P1OUT & = 0 ;
                    P1OUT | = LINHA3;           // SETA LINHA1
                }    
        }
             return  0 ;
}
	    
6 ->

        ---  ==> A
       |   |
 F <== |   | ==> B
       |   |
        ---  ==> G
       |   |
 E <== |   | ==> C
       |   |
        ---  ==> D
# include  < msp430g2553.h > 
# include  < msp430.h >

/ *
 * --- ==> A 
       | | 
F <== | | ==> B 
       | | 
        --- ==> G 
       | | 
E <== | | ==> C 
       | | 
        --- ==> D 
* /

vazio  EscreveDigito ( volátil  carvão animal escavação)
{
    char entrada;
    int ZERO = 0x7E ;
    int UM = 0x60 ;
    int DOIS = 0x6D ;
    int TRES = 0x79 ;
    int QUATRO = 0x33 ;
    int CINCO = 0x5B ;
    int SEIS = 0x1F ;
    int SETE = 0x70 ;
    int OITO = 0x7F ;
    int NOVE = 0x73 ;
    int A = 0x77 ;
    int B = 0x1F ;
    int C12 = 0x4D ;
    int D = 0x3D ;
    int E = 0x4F ;
    int F = 0x47 ;
    entrada = dig;
	unsigned  int P1OUT;
    if (entrada == 0 )
    {
        P1OUT & = 0 ;         // desliga o acesso, zera saida 
        P1OUT | = ZERO;      // seta a saida, com a entrada
    }
    else  if (entrada == 1 )
    {
        P1OUT & = 0 ;
        P1OUT | = UM;
    }
    else  if (entrada == 2 )
    {
        P1OUT & = 0 ;
        P1OUT | = DOIS;
    }
    else  if (entrada == 3 )
    {
        P1OUT & = 0 ;
        P1OUT | = TRES;
    }
    else  if (entrada == 4 )
    {
        P1OUT & = 0 ;
        P1OUT | = QUATRO;
    }
    else  if (entrada == 5 )
    {
        P1OUT & = 0 ;
        P1OUT | = CINCO;
    }
    else  if (entrada == 6 )
    {
        P1OUT & = 0 ;
        P1OUT | = SEIS;
    }
    else  if (entrada == 7 )
    {
        P1OUT & = 0 ;
        P1OUT | = SETE;
    }
    else  if (entrada == 8 )
    {
        P1OUT & = 0 ;
        P1OUT | = OITO;
    }
    else  if (entrada == 9 )
    {
        P1OUT & = 0 ;
        P1OUT | = NOVE;
    }
    else  if (entrada == ' A ' )
    {
        P1OUT & = 0 ;
        P1OUT | = A;
    }
    else  if (entrada == ' B ' )
    {
        P1OUT & = 0 ;
        P1OUT | = B;
    }
    else  if (entrada == ' C ' )
    {
        P1OUT & = 0 ;
        P1OUT | = C12;
    }
    else  if (entrada == ' D ' )
    {
        P1OUT & = 0 ;
        P1OUT | = D;
    } else  if (entrada == ' E ' )
    {
        P1OUT & = 0 ;
        P1OUT | = E;
    } else  if (entrada == ' F ' )
    {
        P1OUT & = 0 ;
        P1OUT | = F;
    }
}
